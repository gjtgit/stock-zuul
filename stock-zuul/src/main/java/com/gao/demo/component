package com.gao.demo.component;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Base64;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;
import com.netflix.zuul.exception.ZuulException;

@Component
public class AuthFilter extends ZuulFilter {
 
    private Logger logger = LoggerFactory.getLogger(AuthFilter.class);
 
 
    private static final String LOGIN_URI = "/stock-user/login";
    private static final String REGISTER_URI = "/stock-user/register";
    private static final String ACTIVATE_USRE_URI = "/stock-user/user/checkCode";
    private static final String GET_TOKEN = "/stock-auth/oauth/token";
 
    private static final String INVALID_TOKEN = "invalid token";
    private static final String INVALID_USERID = "invalid userId";
 
    @Override
    public String filterType() {
        return FilterConstants.PRE_TYPE;
    }
 
    @Override
    public int filterOrder() {
        //the smaller, the higher priority
        return FilterConstants.SEND_ERROR_FILTER_ORDER;
    }
 
    @Override
    public boolean shouldFilter() {
        RequestContext ctx = RequestContext.getCurrentContext();
        HttpServletRequest request = ctx.getRequest();
        logger.info(String.format("%s >>> %s", request.getMethod(), request.getRequestURI()));
        //except for login and resigter uri, others need token
        if (LOGIN_URI.equals(request.getRequestURI()) ||
            REGISTER_URI.equals(request.getRequestURI()) ||
            ACTIVATE_USRE_URI.equals(request.getRequestURI()) ||
            GET_TOKEN.equals(request.getRequestURI()) ||
            HttpMethod.OPTIONS.equals(request.getMethod())
            ) {
            return false;
        }
        return true;
    }
 
    //the filter logic, any return type include null means passed.
    @Override
    public Object run() throws ZuulException {
        RequestContext ctx = RequestContext.getCurrentContext();
        HttpServletRequest request = ctx.getRequest();
        String headerToken = request.getHeader("authorization");
        logger.info("zuul filter get token = "+headerToken);
        if (StringUtils.isEmpty(headerToken)) {
            setUnauthorizedResponse(ctx, INVALID_TOKEN);
        } else {
            String[] tokens = this.extractAndDecodeHeader(headerToken);
            assert tokens.length == 2;
            //获取clientId 和 clientSecret
            String clientId = tokens[0];
            String clientSecret = tokens[1];
            logger.info(clientId+"  "+clientSecret);
            ctx.setSendZuulResponse(true);  //false means stop to continue.
            ctx.setResponseStatusCode(200);
        }
        return null;
    }
 
    /**
     *  401 unauthorized
     */
    private void setUnauthorizedResponse(RequestContext requestContext, String msg) {
        requestContext.setSendZuulResponse(false);
        requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());
        String result = "";
        requestContext.setResponseBody(result);
    }
    
    private String[] extractAndDecodeHeader(String header){
        byte[] base64Token = new byte[] {};
        try {
            base64Token = header.substring(6).getBytes("UTF-8");
        } catch (UnsupportedEncodingException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        
        final Base64.Decoder decoder = Base64.getDecoder();
        byte[] decoded = decoder.decode(base64Token);

        String token ="";
        try {
            token = new String(decoded, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        int delim = token.indexOf(":");
        if (delim == -1) {
            logger.info("Invalid basic authentication token");
            return new String[]{};
        } else {
            return new String[]{token.substring(0, delim), token.substring(delim + 1)};
        }
    }
}
